/*
 * VibraGuard AI - Data Collection (Phase 1)
 * M·ª•c ti√™u: Thu th·∫≠p d·ªØ li·ªáu rung ƒë·ªông t·ª´ MPU-6050 ƒë·ªÉ hu·∫•n luy·ªán AI
 *
 * Ph·∫ßn c·ª©ng:
 * - ESP32-C3 Super Mini
 * - MPU-6050 (I2C)
 *
 * S∆° ƒë·ªì n·ªëi d√¢y:
 * - MPU-6050 VCC -> 3V3 (ESP32)
 * - MPU-6050 GND -> GND (ESP32)
 * - MPU-6050 SDA -> GP4 (ESP32)
 * - MPU-6050 SCL -> GP5 (ESP32)
 *
 * C√°ch s·ª≠ d·ª•ng:
 * 1. N·∫°p code n√†y v√†o ESP32
 * 2. Ch·∫°y: edge-impulse-data-forwarder
 * 3. Thu th·∫≠p d·ªØ li·ªáu v·ªõi c√°c nh√£n:
 *    - "normal": G√µ c·ª≠a, ƒë√≥ng c·ª≠a, v·ªó tay (3-5 ph√∫t)
 *    - "attack": M√¥ ph·ªèng khoan, ƒë·∫≠p, c·∫°y (3-5 ph√∫t)
 *    - "noise": Kh√¥ng l√†m g√¨ (1-2 ph√∫t)
 */

#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

Adafruit_MPU6050 mpu;
int sample_rate_ms = 100; // Thu th·∫≠p 10 m·∫´u/gi√¢y (1000ms / 100ms)

// C·∫•u h√¨nh ƒë·ªãa ch·ªâ I2C (thay ƒë·ªïi n·∫øu c·∫ßn)
#define MPU6050_ADDRESS 0x68 // Thay th√†nh 0x69 n·∫øu debug tool ph√°t hi·ªán ·ªü ƒë√≥

void setup()
{
    Serial.begin(115200);

    // Kh·ªüi t·∫°o I2C v·ªõi SDA=GP4, SCL=GP5
    Wire.begin(4, 5);

    Serial.println("\n========================================");
    Serial.println("VibraGuard AI - Data Forwarder");
    Serial.println("========================================");

    if (!mpu.begin(MPU6050_ADDRESS))
    {
        Serial.println("‚ùå Loi! Khong tim thay MPU6050.");
        Serial.println("   Kiem tra lai day ket noi:");
        Serial.println("   - VCC -> 3V3");
        Serial.println("   - GND -> GND");
        Serial.println("   - SDA -> GP4");
        Serial.println("   - SCL -> GP5");
        Serial.print("   - Dia chi I2C dang test: 0x");
        Serial.println(MPU6050_ADDRESS, HEX);
        Serial.println("   üí° Neu khong phai 0x68, thay doi MPU6050_ADDRESS thanh 0x69");
        while (1)
        {
            delay(10);
        }
    }

    Serial.println("‚úÖ MPU6050 san sang!");
    Serial.println("üìä Bat dau stream du lieu...");
    Serial.println("   Format: X, Y, Z (acceleration)");
    Serial.println("========================================\n");

    // C·∫•u h√¨nh MPU6050
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

    delay(1000); // Cho c·∫£m bi·∫øn ·ªïn ƒë·ªãnh
}

void loop()
{
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);

    // In 3 tr·ª•c gia t·ªëc X, Y, Z theo ƒë·ªãnh d·∫°ng Edge Impulse
    // Format: x,y,z (d·∫•u ph·∫©y, kh√¥ng c√≥ kho·∫£ng tr·∫Øng)
    Serial.print(a.acceleration.x);
    Serial.print(",");
    Serial.print(a.acceleration.y);
    Serial.print(",");
    Serial.println(a.acceleration.z);

    delay(sample_rate_ms);
}
