/*
 * =======================================================
 * PH∆Ø∆†NG √ÅN C: S·ª≠a l·ªói th∆∞ vi·ªán tockn
 * =======================================================
 * L·ªói bi√™n d·ªãch tr∆∞·ªõc l√† do t√¥i tr·ªôn l·∫´n 2 th∆∞ vi·ªán.
 * Code n√†y ch·ªâ d√πng 100% th∆∞ vi·ªán "MPU6050_tockn".
 *
 * N·ªëi d√¢y (V·∫´n nh∆∞ c≈© - ƒê√É ƒê√öNG):
 * - SDA -> GP8
 * - SCL -> GP9
 */

#include <MPU6050_tockn.h> // <--- Ch·ªâ d√πng th∆∞ vi·ªán n√†y
#include <Wire.h>

MPU6050 mpu(Wire);

void setup() {
    Serial.begin(115200);
    
    // Kh·ªüi t·∫°o I2C v·ªõi SDA=GP8, SCL=GP9
    Wire.begin(8, 9); 
    
    mpu.begin();
    
    Serial.println("\n========================================");
    Serial.println("VibraGuard AI - Data Forwarder (tockn lib)");
    Serial.println("========================================");
    Serial.println("Dang kiem tra ket noi (dung thu vien tockn)...");

    // Y√™u c·∫ßu c·∫£m bi·∫øn t·ª± hi·ªáu ch·ªânh
    // ƒê√¢y l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ "test" k·∫øt n·ªëi.
    // N·∫øu n√≥ ƒë·ª©ng im ·ªü ƒë√¢y -> L·ªói ph·∫ßn c·ª©ng (h√†n/ƒë·ª©t d√¢y)
    Serial.println("Dang tu hieu chinh Gyro... Vui long giu IM cam bien.");
    mpu.calcGyroOffsets(); 
    
    Serial.println("‚úÖ‚úÖ‚úÖ THANH CONG! Ket noi I2C thanh cong!");
    Serial.println("üìä Bat dau stream du lieu (X, Y, Z)...");
}

void loop() {
    // 1. C·∫≠p nh·∫≠t d·ªØ li·ªáu (B·∫ÆT BU·ªòC ph·∫£i g·ªçi h√†m n√†y)
    mpu.update(); 
    
    // 2. L·∫•y d·ªØ li·ªáu (D√πng h√†m chu·∫©n c·ªßa tockn)
    float accX = mpu.getAccX();
    float accY = mpu.getAccY();
    float accZ = mpu.getAccZ();

    // 3. In ra theo format Edge Impulse
    // Format: x,y,z (kh√¥ng c√≥ kho·∫£ng tr·∫Øng)
    Serial.print(accX);
    Serial.print(",");
    Serial.print(accY);
    Serial.print(",");
    Serial.println(accZ);
    
    delay(100); // 10 m·∫´u/gi√¢y (nh∆∞ Edge Impulse c·∫ßn)
}