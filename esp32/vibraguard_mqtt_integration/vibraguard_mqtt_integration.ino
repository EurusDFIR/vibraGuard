/*
 * VibraGuard - MQTT Integration (Giai ƒëo·∫°n 3)
 * M·ª•c ti√™u: K·∫øt n·ªëi ESP32 v·ªõi MQTT Broker v√† g·ª≠i d·ªØ li·ªáu l√™n Backend
 *
 * Th∆∞ vi·ªán c·∫ßn c√†i ƒë·∫∑t trong Arduino IDE:
 * 1. PubSubClient by Nick O'Leary
 *
 * S∆° ƒë·ªì k·∫øt n·ªëi:
 * - SW-420 Digital Out (DO) -> GPIO 13
 * - GPIO 12 -> ƒêi·ªán tr·ªü 1K Ohm -> Transistor NPN Base (B)
 * - Transistor Emitter (E) -> GND
 * - Transistor Collector (C) -> Buzzer (-)
 * - Buzzer (+) -> 5V ho·∫∑c 3.3V
 */

#include <WiFi.h>
#include <PubSubClient.h>

// ===== C·∫§U H√åNH WIFI =====
const char *ssid = "LE HUNG";       // Thay b·∫±ng t√™n WiFi c·ªßa b·∫°n
const char *password = "123456789"; // Thay b·∫±ng m·∫≠t kh·∫©u WiFi

// ===== C·∫§U H√åNH MQTT =====
const char *mqtt_server = "192.168.1.2"; // Thay b·∫±ng IP m√°y t√≠nh ch·∫°y Mosquitto
const int mqtt_port = 1883;
const char *mqtt_topic = "vibra_guard/sensor";
const char *device_id = "ESP32_CUA_SO_01"; // ID thi·∫øt b·ªã (ph·∫£i kh·ªõp v·ªõi DB)

// MQTT Keepalive settings
const unsigned long MQTT_KEEP_ALIVE = 15; // Gi·∫£m xu·ªëng 15 gi√¢y ƒë·ªÉ match Mosquitto
const unsigned long MQTT_TIMEOUT = 5000;  // 5 gi√¢y timeout cho operations

// ===== ƒê·ªäNH NGHƒ®A CH√ÇN =====
const int SENSOR_PIN = 2; // SW-420 Digital Output
const int BUZZER_PIN = 1; // ƒêi·ªÅu khi·ªÉn Buzzer qua Transistor

// ===== BI·∫æN TO√ÄN C·ª§C =====
WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastVibrationTime = 0;
const unsigned long VIBRATION_COOLDOWN = 2000; // 2 gi√¢y cooldown gi·ªØa c√°c l·∫ßn g·ª≠i

// ===== BI·∫æN CHO BUZZER =====
bool buzzerActive = false;
unsigned long buzzerStartTime = 0;
const unsigned long BUZZER_DURATION = 5000; // 5 gi√¢y k√™u c√≤i li√™n t·ª•c

// ===== BI·∫æN CHO RECONNECT =====
unsigned long lastWiFiCheck = 0;
unsigned long lastMQTTCheck = 0;
unsigned long lastMQTTReconnectAttempt = 0;
const unsigned long WIFI_CHECK_INTERVAL = 10000; // Ki·ªÉm tra WiFi m·ªói 10 gi√¢y
const unsigned long MQTT_CHECK_INTERVAL = 5000;  // Ki·ªÉm tra MQTT m·ªói 5 gi√¢y
unsigned long mqttReconnectDelay = 1000;         // Delay ban ƒë·∫ßu 1 gi√¢y
const unsigned long MQTT_MAX_DELAY = 30000;      // Delay t·ªëi ƒëa 30 gi√¢y

// ===== TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG =====
bool wifiConnected = false;
bool mqttConnected = false;

// MQTT timeout tracking
unsigned long lastMQTTMessageTime = 0;
const unsigned long MQTT_TIMEOUT_MS = 60000; // TƒÉng l√™n 60 gi√¢y ƒë·ªÉ kh√¥ng can thi·ªáp MQTT keepalive

void checkMQTTTimeout()
{
    if (mqttConnected && (millis() - lastMQTTMessageTime > MQTT_TIMEOUT_MS))
    {
        Serial.println("‚ö†Ô∏è  MQTT timeout detected - forcing reconnect");
        mqttConnected = false;
        client.disconnect();
    }
}

void setup()
{
    // Kh·ªüi t·∫°o Serial
    Serial.begin(115200);
    Serial.println("\n\n========================================");
    Serial.println("VibraGuard - MQTT Integration Started");
    Serial.println("========================================");

    // C·∫•u h√¨nh ch√¢n
    pinMode(SENSOR_PIN, INPUT);
    pinMode(BUZZER_PIN, OUTPUT);
    digitalWrite(BUZZER_PIN, LOW);

    // K·∫øt n·ªëi WiFi
    connectWiFi();

    // C·∫•u h√¨nh MQTT v·ªõi keepalive
    client.setServer(mqtt_server, mqtt_port);
    client.setCallback(mqttCallback);
    client.setKeepAlive(MQTT_KEEP_ALIVE);
    client.setSocketTimeout(MQTT_TIMEOUT);

    Serial.println("System Ready - Monitoring vibration...");
}

void loop()
{
    unsigned long currentTime = millis();

    // Ki·ªÉm tra v√† reconnect WiFi
    if (currentTime - lastWiFiCheck >= WIFI_CHECK_INTERVAL)
    {
        checkWiFiConnection();
        lastWiFiCheck = currentTime;
    }

    // Ki·ªÉm tra v√† reconnect MQTT (ch·ªâ khi WiFi ƒë√£ k·∫øt n·ªëi)
    if (wifiConnected && currentTime - lastMQTTCheck >= MQTT_CHECK_INTERVAL)
    {
        checkMQTTConnection();
        lastMQTTCheck = currentTime;
    }

    // Ki·ªÉm tra MQTT timeout
    if (mqttConnected)
    {
        checkMQTTTimeout();
    }

    // X·ª≠ l√Ω MQTT messages (lu√¥n g·ªçi client.loop() n·∫øu WiFi connected)
    if (wifiConnected)
    {
        client.loop();
    }

    // ƒê·ªçc tr·∫°ng th√°i c·∫£m bi·∫øn rung
    int sensorState = digitalRead(SENSOR_PIN);

    // Qu·∫£n l√Ω buzzer - ki·ªÉm tra xem c√≥ c·∫ßn t·∫Øt kh√¥ng
    if (buzzerActive && (currentTime - buzzerStartTime >= BUZZER_DURATION))
    {
        digitalWrite(BUZZER_PIN, LOW);
        buzzerActive = false;
        Serial.println("üîï Buzzer auto-off after timeout");
    }

    if (sensorState == HIGH)
    {
        // Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh spam MQTT messages
        if (currentTime - lastVibrationTime > VIBRATION_COOLDOWN)
        {
            lastVibrationTime = currentTime;

            // Ph√°t hi·ªán rung ƒë·ªông!
            Serial.println("\n‚ö†Ô∏è  VIBRATION DETECTED!");

            // B·∫≠t c√≤i li√™n t·ª•c (n·∫øu ch∆∞a active)
            if (!buzzerActive)
            {
                digitalWrite(BUZZER_PIN, HIGH);
                buzzerActive = true;
                buzzerStartTime = currentTime;
                Serial.println("üîä Buzzer activated for 5 seconds!");
            }

            // G·ª≠i tin nh·∫Øn MQTT (ch·ªâ khi MQTT ƒë√£ k·∫øt n·ªëi)
            if (mqttConnected)
            {
                sendVibrationAlert();
            }
            else
            {
                Serial.println("‚ö†Ô∏è  MQTT not connected - Cannot send alert!");
            }
        }
    }

    delay(50);
}

void connectWiFi()
{
    Serial.print("\nüîå Connecting to WiFi: ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20)
    {
        delay(500);
        Serial.print(".");
        attempts++;
    }

    if (WiFi.status() == WL_CONNECTED)
    {
        Serial.println("\n‚úÖ WiFi Connected!");
        Serial.print("üì° IP Address: ");
        Serial.println(WiFi.localIP());
        wifiConnected = true;
    }
    else
    {
        Serial.println("\n‚ùå WiFi Connection Failed!");
        wifiConnected = false;
    }
}

void checkWiFiConnection()
{
    if (WiFi.status() != WL_CONNECTED)
    {
        Serial.println("\nüì∂ WiFi connection lost! Attempting to reconnect...");
        wifiConnected = false;
        mqttConnected = false; // MQTT c≈©ng s·∫Ω m·∫•t khi WiFi m·∫•t

        connectWiFi();
    }
    else if (!wifiConnected)
    {
        // WiFi ƒë√£ k·∫øt n·ªëi nh∆∞ng flag ch∆∞a ƒë∆∞·ª£c set
        wifiConnected = true;
        Serial.println("‚úÖ WiFi status confirmed");
        printWiFiInfo();
    }
    else
    {
        // Ki·ªÉm tra WiFi signal quality ƒë·ªãnh k·ª≥
        static unsigned long lastSignalCheck = 0;
        if (millis() - lastSignalCheck > 30000)
        { // M·ªói 30 gi√¢y
            printWiFiInfo();
            lastSignalCheck = millis();
        }
    }
}

void printWiFiInfo()
{
    Serial.print("üìä WiFi Info - IP: ");
    Serial.print(WiFi.localIP());
    Serial.print(" | RSSI: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
}

void checkMQTTConnection()
{
    unsigned long currentTime = millis();

    // Debug: In ra state hi·ªán t·∫°i
    static unsigned long lastDebugPrint = 0;
    if (millis() - lastDebugPrint > 10000)
    { // M·ªói 10 gi√¢y
        Serial.print("üîç MQTT State - Connected: ");
        Serial.print(client.connected() ? "YES" : "NO");
        Serial.print(" | Flag: ");
        Serial.println(mqttConnected ? "YES" : "NO");
        lastDebugPrint = millis();
    }

    // Ch·ªâ th·ª≠ reconnect n·∫øu ƒë√£ ƒë·ªß th·ªùi gian delay
    if (!client.connected() && (currentTime - lastMQTTReconnectAttempt >= mqttReconnectDelay))
    {
        Serial.print("\nüîÑ Attempting MQTT connection...");

        String clientId = "ESP32-";
        clientId += String(device_id);

        // Th·ª≠ connect v·ªõi timeout
        bool connectResult = false;
        unsigned long connectStart = millis();

        // Non-blocking connect attempt
        if (client.connect(clientId.c_str()))
        {
            connectResult = true;
        }

        if (connectResult && client.connected())
        {
            Serial.println(" ‚úÖ Connected to MQTT Broker!");
            mqttConnected = true;
            lastMQTTMessageTime = millis(); // Reset timeout counter

            // Subscribe to control topic
            String controlTopic = "vibra_guard/control/" + String(device_id);
            if (client.subscribe(controlTopic.c_str()))
            {
                Serial.print("üì• Subscribed to: ");
                Serial.println(controlTopic);
            }
            else
            {
                Serial.println("‚ùå Failed to subscribe to control topic!");
            }

            // Reset reconnect delay khi th√†nh c√¥ng
            mqttReconnectDelay = 1000;
        }
        else
        {
            int errorCode = client.state();
            Serial.print(" ‚ùå Failed, rc=");
            Serial.print(errorCode);

            // Ph√¢n t√≠ch l·ªói chi ti·∫øt h∆°n
            switch (errorCode)
            {
            case -4:
                Serial.print(" (connection timeout)");
                break;
            case -3:
                Serial.print(" (connection lost)");
                break;
            case -2:
                Serial.print(" (connect failed)");
                break;
            case -1:
                Serial.print(" (malformed packet)");
                break;
            case 1:
                Serial.print(" (protocol violation)");
                break;
            case 2:
                Serial.print(" (client id rejected)");
                break;
            case 3:
                Serial.print(" (server unavailable)");
                break;
            case 4:
                Serial.print(" (bad credentials)");
                break;
            case 5:
                Serial.print(" (not authorized)");
                break;
            default:
                Serial.print(" (unknown)");
                break;
            }

            // Ki·ªÉm tra WiFi status khi MQTT fail
            Serial.print(" | WiFi Status: ");
            switch (WiFi.status())
            {
            case WL_CONNECTED:
                Serial.print("Connected");
                break;
            case WL_NO_SHIELD:
                Serial.print("No Shield");
                break;
            case WL_IDLE_STATUS:
                Serial.print("Idle");
                break;
            case WL_NO_SSID_AVAIL:
                Serial.print("No SSID");
                break;
            case WL_SCAN_COMPLETED:
                Serial.print("Scan Done");
                break;
            case WL_CONNECT_FAILED:
                Serial.print("Connect Failed");
                break;
            case WL_CONNECTION_LOST:
                Serial.print("Connection Lost");
                break;
            case WL_DISCONNECTED:
                Serial.print("Disconnected");
                break;
            default:
                Serial.print("Unknown");
                break;
            }

            Serial.print(" - Retrying in ");
            Serial.print(mqttReconnectDelay / 1000);
            Serial.println(" seconds...");

            mqttConnected = false;

            // Exponential backoff
            mqttReconnectDelay = min(mqttReconnectDelay * 2, MQTT_MAX_DELAY);
        }

        lastMQTTReconnectAttempt = currentTime;
    }
    else if (client.connected() && !mqttConnected)
    {
        // MQTT ƒë√£ k·∫øt n·ªëi nh∆∞ng flag ch∆∞a ƒë∆∞·ª£c set
        mqttConnected = true;
        Serial.println("‚úÖ MQTT status confirmed");
    }
    else if (!client.connected() && mqttConnected)
    {
        // MQTT v·ª´a m·∫•t k·∫øt n·ªëi
        mqttConnected = false;
        Serial.println("üì° MQTT connection lost!");
        mqttReconnectDelay = 1000; // Reset delay ƒë·ªÉ reconnect ngay
    }
}

void sendVibrationAlert()
{
    if (!mqttConnected || !client.connected())
    {
        Serial.println("‚ùå Cannot send MQTT message - Not connected!");
        return;
    }

    // T·∫°o JSON payload
    String payload = "{";
    payload += "\"deviceId\":\"" + String(device_id) + "\",";
    payload += "\"timestamp\:" + String(millis()) + ",";
    payload += "\"sensorValue\":1";
    payload += "}";

    // Publish to MQTT v·ªõi retry
    int retryCount = 0;
    const int MAX_RETRIES = 3;
    boolean success = false;

    while (retryCount < MAX_RETRIES && !success)
    {
        if (client.connected())
        {
            success = client.publish(mqtt_topic, payload.c_str());
            if (!success)
            {
                retryCount++;
                if (retryCount < MAX_RETRIES)
                {
                    Serial.print("‚ö†Ô∏è  Publish failed, retrying... (");
                    Serial.print(retryCount);
                    Serial.print("/");
                    Serial.print(MAX_RETRIES);
                    Serial.println(")");
                    delay(100 * retryCount); // Delay tƒÉng d·∫ßn
                }
            }
        }
        else
        {
            Serial.println("‚ùå MQTT disconnected during publish attempt!");
            mqttConnected = false;
            break;
        }
    }

    if (success)
    {
        Serial.println("üì§ MQTT Message Sent:");
        Serial.println("   Topic: " + String(mqtt_topic));
        Serial.println("   Payload: " + payload);
        lastMQTTMessageTime = millis(); // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i th√†nh c√¥ng
    }
    else
    {
        Serial.println("‚ùå Failed to send MQTT message after retries!");
        mqttConnected = false; // Mark as disconnected ƒë·ªÉ trigger reconnect
    }
}

void mqttCallback(char *topic, byte *payload, unsigned int length)
{
    Serial.print("\nüì® Message received [");
    Serial.print(topic);
    Serial.print("]: ");

    String message;
    for (int i = 0; i < length; i++)
    {
        message += (char)payload[i];
    }
    Serial.println(message);

    // X·ª≠ l√Ω l·ªánh ƒëi·ªÅu khi·ªÉn
    if (message.indexOf("DISARM") >= 0)
    {
        Serial.println("üîï Disarm command received - Buzzer OFF immediately");
        digitalWrite(BUZZER_PIN, LOW);
        buzzerActive = false;
    }
    else if (message.indexOf("ARM") >= 0)
    {
        Serial.println("üîî Arm command received - System active");
        // C√≥ th·ªÉ th√™m logic arm/disarm sau
    }
    else if (message.indexOf("BUZZER_OFF") >= 0)
    {
        Serial.println("üîá Buzzer OFF command received");
        digitalWrite(BUZZER_PIN, LOW);
        buzzerActive = false;
    }
}
