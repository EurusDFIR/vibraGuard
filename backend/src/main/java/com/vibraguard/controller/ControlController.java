package com.vibraguard.controller;

import com.vibraguard.service.ControlService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

/**
 * Controller x·ª≠ l√Ω c√°c l·ªánh ƒëi·ªÅu khi·ªÉn h·ªá th·ªëng
 * - ARM: K√≠ch ho·∫°t b√°o ƒë·ªông
 * - DISARM: T·∫Øt b√°o ƒë·ªông
 * - STATUS: Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
 */
@RestController
@RequestMapping("/api/control")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class ControlController {

    private final ControlService controlService;

    /**
     * POST /api/control/arm
     * G·ª≠i l·ªánh ARM ƒë·∫øn t·∫•t c·∫£ thi·∫øt b·ªã ESP32
     */
    @PostMapping("/arm")
    public ResponseEntity<Map<String, Object>> armSystem(@RequestParam(required = false) String deviceId) {
        log.info("üîî ARM command received");

        try {
            if (deviceId != null && !deviceId.isEmpty()) {
                controlService.sendArmCommand(deviceId);
            } else {
                controlService.sendArmCommandToAll();
            }

            Map<String, Object> response = new HashMap<>();
            response.put("status", "success");
            response.put("message", "System armed successfully");
            response.put("systemStatus", "ARMED");
            response.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("‚ùå Error arming system: {}", e.getMessage());
            Map<String, Object> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * POST /api/control/disarm
     * G·ª≠i l·ªánh DISARM ƒë·∫øn t·∫•t c·∫£ thi·∫øt b·ªã ESP32 (t·∫Øt c√≤i)
     */
    @PostMapping("/disarm")
    public ResponseEntity<Map<String, Object>> disarmSystem(@RequestParam(required = false) String deviceId) {
        log.info("üîï DISARM command received");

        try {
            if (deviceId != null && !deviceId.isEmpty()) {
                controlService.sendDisarmCommand(deviceId);
            } else {
                controlService.sendDisarmCommandToAll();
            }

            Map<String, Object> response = new HashMap<>();
            response.put("status", "success");
            response.put("message", "System disarmed successfully");
            response.put("systemStatus", "DISARMED");
            response.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("‚ùå Error disarming system: {}", e.getMessage());
            Map<String, Object> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * POST /api/control/sound_alarm
     * B·∫≠t c√≤i b√°o ƒë·ªông th·ªß c√¥ng (Panic Button)
     */
    @PostMapping("/sound_alarm")
    public ResponseEntity<Map<String, Object>> soundAlarm(@RequestParam(required = false) String deviceId) {
        log.info("üö® SOUND_ALARM command received (Manual Panic Button)");

        try {
            if (deviceId != null && !deviceId.isEmpty()) {
                controlService.sendSoundAlarmCommand(deviceId);
            } else {
                controlService.sendSoundAlarmCommandToAll();
            }

            Map<String, Object> response = new HashMap<>();
            response.put("status", "success");
            response.put("message", "Manual alarm activated successfully");
            response.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("‚ùå Error activating manual alarm: {}", e.getMessage());
            Map<String, Object> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * GET /api/control/status
     * L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa h·ªá th·ªëng
     */
    @GetMapping("/status")
    public ResponseEntity<Map<String, Object>> getSystemStatus() {
        log.info("üìä System status requested");

        Map<String, Object> response = new HashMap<>();
        response.put("systemStatus", controlService.getSystemStatus());
        response.put("timestamp", System.currentTimeMillis());
        response.put("devicesCount", controlService.getActiveDevicesCount());

        return ResponseEntity.ok(response);
    }
}
